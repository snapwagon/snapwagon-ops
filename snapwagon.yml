---
- hosts: all
  become: yes
  tasks:
    - name: make sure required packages are installed
      apt: 
        pkg: "{{ item }}" 
        update_cache: yes 
        cache_valid_time: 3600
      with_items:
        - python-dev
        - python-pexpect
        - python-pip
        - python-psycopg2
        - python3-dev
        - python3-pip
        - build-essential
        - libssl-dev
        - libffi-dev
        - libpq-dev
        - nginx
        - git
        - libjpeg-dev
        - zlib1g-dev
        - postgresql
        - postgresql-contrib
        - supervisor

- hosts: all
  become: yes
  vars:
    deploy_dir: /home/parentj/sites/snapwagon.io/deploy
    source_dir: /home/parentj/sites/snapwagon.io/source
    static_dir: /home/parentj/sites/snapwagon.io/static
    virtualenv_dir: /home/parentj/sites/snapwagon.io/virtualenv
  vars_files:
    - secrets.yml
  tasks:
    - name: create directory structure if necessary
      file: 
        path: "/home/parentj/sites/snapwagon.io/{{ item }}" 
        state: directory 
        mode: "0755"
      with_items:
        - deploy
        - media
        - source
        - static
        - virtualenv

    - name: get latest source
      git: 
        repo: "https://{{ github_username }}:{{ github_password }}@github.com/snapwagon/snapwagon.git" 
        dest: "{{ source_dir }}/snapwagon"

    - name: make sure virtualenv is installed
      pip: 
        executable: pip3
        name: virtualenv

    - name: install requirements
      pip: 
        requirements: "{{ source_dir }}/snapwagon/requirements/prod.txt" 
        virtualenv: "{{ virtualenv_dir }}" 
        virtualenv_python: python3

    - name: update static files
      django_manage: 
        command: "collectstatic --noinput" 
        app_path: "{{ source_dir }}/snapwagon" 
        settings: settings.prod 
        virtualenv: "{{ virtualenv_dir }}"

    - name: create database user
      postgresql_user:
        name: "{{ database_user }}"
        password: "{{ database_pass }}"
      become_user: postgres

    - name: create database
      postgresql_db:
        name: "{{ database_name }}"
        owner: "{{ database_user }}"
        encoding: UTF8
        lc_ctype: en_US.UTF-8
        lc_collate: en_US.UTF-8
        template: template0
      become_user: postgres

    - name: update database
      django_manage: 
        command: "migrate --noinput" 
        app_path: "{{ source_dir }}/snapwagon" 
        settings: settings.prod 
        virtualenv: "{{ virtualenv_dir }}"
      environment:
        DATABASE_NAME: "{{ database_name }}"
        DATABASE_USER: "{{ database_user }}"
        DATABASE_PASS: "{{ database_pass }}"

    - name: create admin superuser
      expect:
        chdir: "{{ source_dir }}/snapwagon"
        command: "{{ virtualenv_dir }}/bin/python3 manage.py createsuperuser --username={{ django_admin_username }} --email={{ django_admin_email }} --settings=settings.prod"
        responses: 
          Password:
            - "{{ django_admin_password }}"
            - "{{ django_admin_password }}"
      environment:
        DATABASE_NAME: "{{ database_name }}"
        DATABASE_USER: "{{ database_user }}"
        DATABASE_PASS: "{{ database_pass }}"
      ignore_errors: True

- hosts: all
  become: yes
  vars: 
    deploy_dir: /home/parentj/sites/snapwagon.io/deploy
    inventory_hostname: snapwagon.io
    source_dir: /home/parentj/sites/snapwagon.io/source
    virtualenv_dir: /home/parentj/sites/snapwagon.io/virtualenv
  vars_files:
    - secrets.yml
  tasks:
    - name: allow long hostnames in nginx
      lineinfile:
        dest: /etc/nginx/nginx.conf
        regexp: '(\s+)#? ?server_names_hash_bucket_size'
        backrefs: yes
        line: '\1server_names_hash_bucket_size 64;'

    - name: add nginx config to sites-available
      template: 
        src: templates/nginx.conf.j2
        dest: "/etc/nginx/sites-available/{{ inventory_hostname }}"
      notify:
          - restart nginx

    - name: add symlink in nginx sites-enabled
      file: 
        src: "/etc/nginx/sites-available/{{ inventory_hostname }}"
        dest: "/etc/nginx/sites-enabled/{{ inventory_hostname }}" 
        state: link
      notify:
          - restart nginx

    - name: write gunicorn configuration file
      template: 
        src: templates/gunicorn.conf.py.j2
        dest: "{{ deploy_dir }}/gunicorn.conf.py"
      notify:
        - restart supervisor

    - name: write supervisor configuration file
      template:
        src: templates/supervisor/supervisor.conf.j2
        dest: /etc/supervisor/supervisord.conf
      notify:
        - restart supervisor

    - name: write supervisor gunicorn configuration file
      template:
        src: templates/supervisor/gunicorn.conf.j2
        dest: /etc/supervisor/conf.d/gunicorn.conf
      notify:
        - restart supervisor

    - name: make sure nginx is running
      service: 
        name: nginx 
        state: started

  handlers:
    - name: restart supervisor
      supervisorctl:
        name: gunicorn
        state: restarted

    - name: restart nginx
      service: 
        name: nginx 
        state: reloaded
